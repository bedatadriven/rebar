<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ Copyright 2009-2010 BeDataDriven (alex@bedatadriven.com)
  ~
  ~ Licensed under the Apache License, Version 2.0 (the "License"); you may not
  ~ use this file except in compliance with the License. You may obtain a copy of
  ~ the License at
  ~
  ~ http://www.apache.org/licenses/LICENSE-2.0
  ~
  ~ Unless required by applicable law or agreed to in writing, software
  ~ distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
  ~ WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
  ~ License for the specific language governing permissions and limitations under
  ~ the License.
  -->

<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>
    <groupId>com.bedatadriven.rebar</groupId>
    <artifactId>rebar-appcache</artifactId>
    <packaging>jar</packaging>
    <version>0.2-SNAPSHOT</version>
    <name>AppCache support for GWT</name>
    <description>A linker that generates common and per-permutation Managed Resource Store manifests
        for HTML5 and for Gears for a given GWT module.</description>
    <parent>
        <groupId>com.bedatadriven.rebar</groupId>
        <artifactId>parent</artifactId>
        <version>1.0</version>
    </parent>
    <scm>
        <developerConnection>scm:svn:https://rebar.googlecode.com/svn/trunk/</developerConnection>
    </scm>
    <dependencies>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-servlet</artifactId>
            <version>${gwtVersion}</version>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-user</artifactId>
            <version>${gwtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt</groupId>
            <artifactId>gwt-dev</artifactId>
            <version>${gwtVersion}</version>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>com.google.gwt.google-apis</groupId>
            <artifactId>gwt-gears</artifactId>
            <version>1.2.1</version>
        </dependency>
        <dependency>
            <groupId>com.google.code.gson</groupId>
            <artifactId>gson</artifactId>
            <version>1.6</version>
        </dependency>
        <dependency>
            <groupId>org.easymock</groupId>
            <artifactId>easymock</artifactId>
            <version>3.0</version>
            <scope>test</scope>
        </dependency>


    </dependencies>

    <build>

        <!-- Include everything in the jar -->
        <resources>
            <resource>
                <directory>src/main/java</directory>
                <includes>
                    <include>**/emul/**/*.java</include>
                    <include>**/client/**/*.java</include>
                    <include>**/*.gwt.xml</include>
                    <include>**/*.properties</include>
                    <include>**/*.manifest</include>
                </includes>
            </resource>
            <resource>
                <directory>src/main/resources</directory>
            </resource>
        </resources>
    </build>

    <profiles>
        <profile>
            <id>gears-it</id>
            <build>
                <plugins>

                    <!-- Use the maven antrun plugin to launch junit manually as
                         surefire will not run GWT tests correctly and
                         the gwt-maven-plugin doesn't allow us to pass the parameters
                         we need in and the maven-exec-plugin won't let us add the sources
                          to the classpath-->

                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>ant-test</id>
                                <phase>test</phase>
                                <configuration>
                                    <tasks>
                                        <property name="test_classpath" refid="maven.test.classpath" />
                                        <java classname="junit.textui.TestRunner" fork="true" maxmemory="128m">

                                            <!--  Notes on test config : -->
                                            <!--  1) Linkers are only invoked when a module is compiled,
                                                     so this test will ONLY work in production mode. -->
                                            <!--  2) If you run a test twice on a given port following success,
                                                     weird things will happen as gears (the plugin) tries
                                                     to update the manifest during compilation, so we
                                                     use -port auto -->

                                            <sysproperty key="gwt.args" value="-out target/test-out -gen target/test-gen -port auto -codeServerPort 50101                                                                 -prod                                                                 -runStyle Manual                                                                 -logLevel INFO" />
                                            <arg value="com.bedatadriven.rebar.appcache.client.ModuleStoreTest" />
                                            <classpath>
                                                <pathelement path="${basedir}/src/main/java" />
                                                <pathelement path="${basedir}/src/test/java" />
                                                <pathelement path="${test_classpath}" />
                                            </classpath>
                                        </java>
                                    </tasks>
                                </configuration>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
</project>

